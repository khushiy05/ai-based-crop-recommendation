import React, { useState, useRef } from 'react';
import { Camera, Upload, Loader2, CheckCircle, AlertTriangle, Leaf, Pill } from 'lucide-react';

interface DiseaseDetectionProps {
  isOnline: boolean;
  selectedLanguage: string;
}

const DiseaseDetection: React.FC<DiseaseDetectionProps> = ({ isOnline, selectedLanguage }) => {
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [analyzing, setAnalyzing] = useState(false);
  const [result, setResult] = useState<any>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const translations = {
    en: {
      title: 'Disease Detection System',
      uploadCropImage: 'Upload Crop Image',
      uploadFromGallery: 'Upload from Gallery',
      takePhoto: 'Take Photo',
      analyzeDisease: 'Analyze Disease',
      analyzingImage: 'Analyzing Image...',
      diseaseIdentified: 'Disease Identified',
      diseaseName: 'Disease Name',
      confidence: 'Confidence',
      severity: 'Severity',
      cause: 'Cause',
      organicTreatment: 'Organic Treatment Solutions',
      fertilizerRecommendations: 'Fertilizer Recommendations',
      preventiveMeasures: 'Preventive Measures',
      offlineMode: 'Limited functionality in offline mode. Upload images for basic analysis.'
    },
    hi: {
      title: 'рд░реЛрдЧ рдирд┐рджрд╛рди рдкреНрд░рдгрд╛рд▓реА',
      uploadCropImage: 'рдлрд╕рд▓ рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
      uploadFromGallery: 'рдЧреИрд▓рд░реА рд╕реЗ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
      takePhoto: 'рдлреЛрдЯреЛ рд▓реЗрдВ',
      analyzeDisease: 'рд░реЛрдЧ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ',
      analyzingImage: 'рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд░рд╣реЗ рд╣реИрдВ...',
      diseaseIdentified: 'рд░реЛрдЧ рдХреА рдкрд╣рдЪрд╛рди',
      diseaseName: 'рд░реЛрдЧ рдХрд╛ рдирд╛рдо',
      confidence: 'рд╡рд┐рд╢реНрд╡рд╛рд╕',
      severity: 'рдЧрдВрднреАрд░рддрд╛',
      cause: 'рдХрд╛рд░рдг',
      organicTreatment: 'рдЬреИрд╡рд┐рдХ рдЙрдкрдЪрд╛рд░ рд╕рдорд╛рдзрд╛рди',
      fertilizerRecommendations: 'рдЙрд░реНрд╡рд░рдХ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ',
      preventiveMeasures: 'рдирд┐рд╡рд╛рд░рдХ рдЙрдкрд╛рдп',
      offlineMode: 'рдСрдлрд╝рд▓рд╛рдЗрди рдореЛрдб рдореЗрдВ рд╕реАрдорд┐рдд рдХрд╛рд░реНрдпрдХреНрд╖рдорддрд╛ред рдмреБрдирд┐рдпрд╛рджреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рд▓рд┐рдП рдЫрд╡рд┐рдпрд╛рдВ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред'
    },
    mr: {
      title: 'рд░реЛрдЧ рдирд┐рджрд╛рди рдкреНрд░рдгрд╛рд▓реА',
      uploadCropImage: 'рдкрд┐рдХрд╛рдЪреА рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛',
      uploadFromGallery: 'рдЧреЕрд▓рд░реАрддреВрди рдЕрдкрд▓реЛрдб рдХрд░рд╛',
      takePhoto: 'рдлреЛрдЯреЛ рдХрд╛рдврд╛',
      analyzeDisease: 'рд░реЛрдЧрд╛рдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рд╛',
      analyzingImage: 'рдкреНрд░рддрд┐рдореЗрдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдд рдЖрд╣реЗ...',
      diseaseIdentified: 'рд░реЛрдЧрд╛рдЪреА рдУрд│рдЦ',
      diseaseName: 'рд░реЛрдЧрд╛рдЪреЗ рдирд╛рд╡',
      confidence: 'рд╡рд┐рд╢реНрд╡рд╛рд╕',
      severity: 'рддреАрд╡реНрд░рддрд╛',
      cause: 'рдХрд╛рд░рдг',
      organicTreatment: 'рд╕реЗрдВрджреНрд░рд┐рдп рдЙрдкрдЪрд╛рд░ рд╕рдорд╛рдзрд╛рдиреЗ',
      fertilizerRecommendations: 'рдЦрдд рд╢рд┐рдлрд╛рд░рд╕реА',
      preventiveMeasures: 'рдкреНрд░рддрд┐рдмрдВрдзрд╛рддреНрдордХ рдЙрдкрд╛рдп',
      offlineMode: 'рдСрдлрд▓рд╛рдЗрди рдореЛрдбрдордзреНрдпреЗ рдорд░реНрдпрд╛рджрд┐рдд рдХрд╛рд░реНрдпрдХреНрд╖рдорддрд╛ред рдореВрд▓рднреВрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдгрд╛рд╕рд╛рдареА рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛ред'
    },
    bn: {
      title: 'рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ рж╕рж┐рж╕рзНржЯрзЗржо',
      uploadCropImage: 'ржлрж╕рж▓рзЗрж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи',
      uploadFromGallery: 'ржЧрзНржпрж╛рж▓рж╛рж░рж┐ ржерзЗржХрзЗ ржЖржкрж▓рзЛржб ржХрж░рзБржи',
      takePhoto: 'ржЫржмрж┐ рждрзБрж▓рзБржи',
      analyzeDisease: 'рж░рзЛржЧ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи',
      analyzingImage: 'ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░ржЫрж┐...',
      diseaseIdentified: 'рж░рзЛржЧ рж╕ржирж╛ржХрзНржд ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ',
      diseaseName: 'рж░рзЛржЧрзЗрж░ ржирж╛ржо',
      confidence: 'ржЖрж╕рзНржерж╛',
      severity: 'рждрзАржмрзНрж░рждрж╛',
      cause: 'ржХрж╛рж░ржг',
      organicTreatment: 'ржЬрзИржм ржЪрж┐ржХрж┐рзОрж╕рж╛ рж╕ржорж╛ржзрж╛ржи',
      fertilizerRecommendations: 'рж╕рж╛рж░ рж╕рзБржкрж╛рж░рж┐рж╢',
      preventiveMeasures: 'ржкрзНрж░рждрж┐рж░рзЛржзржорзВрж▓ржХ ржмрзНржпржмрж╕рзНржерж╛',
      offlineMode: 'ржЕржлрж▓рж╛ржЗржи ржорзЛржбрзЗ рж╕рзАржорж┐ржд ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ред ржорзМрж▓рж┐ржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржЬржирзНржп ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржиред'
    },
    te: {
      title: 'р░╡р▒Нр░пр░╛р░зр░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░╡р▒Нр░пр░╡р░╕р▒Нр░е',
      uploadCropImage: 'р░кр░Вр░Я р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      uploadFromGallery: 'р░Чр▒Нр░пр░╛р░▓р░░р▒А р░ир▒Бр░Вр░бр░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      takePhoto: 'р░лр▒Лр░Яр▒Л р░др▒Ар░пр░Вр░бр░┐',
      analyzeDisease: 'р░╡р▒Нр░пр░╛р░зр░┐р░ир░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐',
      analyzingImage: 'р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░В...',
      diseaseIdentified: 'р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐',
      diseaseName: 'р░╡р▒Нр░пр░╛р░зр░┐ р░кр▒Зр░░р▒Б',
      confidence: 'р░╡р░┐р░╢р▒Нр░╡р░╛р░╕р░В',
      severity: 'р░др▒Ар░╡р▒Нр░░р░д',
      cause: 'р░Хр░╛р░░р░гр░В',
      organicTreatment: 'р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░Ър░┐р░Хр░┐р░др▒Нр░╕ р░кр░░р░┐р░╖р▒Нр░Хр░╛р░░р░╛р░▓р▒Б',
      fertilizerRecommendations: 'р░Ор░░р▒Бр░╡р▒Бр░▓ р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б',
      preventiveMeasures: 'р░ир░┐р░╡р░╛р░░р░г р░Ър░░р▒Нр░пр░▓р▒Б',
      offlineMode: 'р░Жр░лр▒НтАМр░▓р▒Ир░ир▒Н р░ор▒Лр░бр▒НтАМр░▓р▒Л р░кр░░р░┐р░ор░┐р░д р░Хр░╛р░░р▒Нр░пр░╛р░Ър░░р░гред р░кр▒Нр░░р░╛р░ер░ор░┐р░Х р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░Хр▒Лр░╕р░В р░Ър░┐р░др▒Нр░░р░╛р░▓р░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐ред'
    },
    ta: {
      title: 'роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН роЕроорпИрокрпНрокрпБ',
      uploadCropImage: 'рокропро┐ро░рпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН',
      uploadFromGallery: 'роХрпЗро▓ро░ро┐ропро┐ро▓ро┐ро░рпБроирпНродрпБ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН',
      takePhoto: 'рокрпБроХрпИрокрпНрокроЯроорпН роОроЯрпБроХрпНроХро╡рпБроорпН',
      analyzeDisease: 'роирпЛропрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН',
      analyzingImage: 'рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНроХро┐ро▒рпЛроорпН...',
      diseaseIdentified: 'роирпЛропрпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ',
      diseaseName: 'роирпЛропро┐ройрпН рокрпЖропро░рпН',
      confidence: 'роироорпНрокро┐роХрпНроХрпИ',
      severity: 'родрпАро╡ро┐ро░роорпН',
      cause: 'роХро╛ро░рогроорпН',
      organicTreatment: 'роЗропро▒рпНроХрпИ роЪро┐роХро┐роЪрпНроЪрпИ родрпАро░рпНро╡рпБроХро│рпН',
      fertilizerRecommendations: 'роЙро░ рокро░ро┐роирпНродрпБро░рпИроХро│рпН',
      preventiveMeasures: 'родроЯрпБрокрпНрокрпБ роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН',
      offlineMode: 'роЖроГрокрпНро▓рпИройрпН рокропройрпНроорпБро▒рпИропро┐ро▓рпН ро╡ро░рпИропро▒рпБроХрпНроХрокрпНрокроЯрпНроЯ роЪрпЖропро▓рпНрокро╛роЯрпБред роЕроЯро┐рокрпНрокроЯрпИ рокроХрпБрокрпНрокро╛ропрпНро╡ро┐ро▒рпНроХрпБ рокроЯроЩрпНроХро│рпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпНред'
    }
  };

  const t = translations[selectedLanguage as keyof typeof translations] || translations.en;

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setSelectedImage(e.target?.result as string);
        setResult(null);
      };
      reader.readAsDataURL(file);
    }
  };

  const analyzeImage = async () => {
    if (!selectedImage) return;
    
    setAnalyzing(true);
    // Simulate AI analysis
    setTimeout(() => {
      const mockResult = {
        disease: 'Bacterial Blight',
        confidence: 87,
        severity: 'Moderate',
        cause: 'Xanthomonas oryzae pathogen',
        organicSolutions: [
          'Apply neem oil spray (10ml per liter)',
          'Remove affected leaves immediately',
          'Improve field drainage',
          'Use copper-based fungicide'
        ],
        fertilizerSuggestions: [
          'Potassium sulphate - 25kg/hectare',
          'Zinc sulphate - 10kg/hectare',
          'Bio-fertilizer - 2kg/hectare'
        ],
        preventiveMeasures: [
          'Maintain proper plant spacing',
          'Avoid overhead irrigation',
          'Use disease-resistant varieties',
          'Regular field inspection'
        ]
      };
      setResult(mockResult);
      setAnalyzing(false);
    }, 3000);
  };

  const captureFromCamera = () => {
    // In a real app, this would access the device camera
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-3xl font-bold text-red-800 mb-6 text-center">
        ЁЯФН {t.title}
      </h1>

      {!isOnline && (
        <div className="bg-orange-100 border border-orange-300 rounded-lg p-4 mb-6">
          <div className="flex items-center">
            <AlertTriangle className="h-5 w-5 text-orange-600 mr-2" />
            <span className="text-orange-800">
              {t.offlineMode}
            </span>
          </div>
        </div>
      )}

      {/* Upload Section */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4">{t.uploadCropImage}</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <button
            onClick={() => fileInputRef.current?.click()}
            className="flex items-center justify-center p-8 border-2 border-dashed border-green-300 rounded-lg hover:border-green-500 transition-colors"
          >
            <div className="text-center">
              <Upload className="h-8 w-8 text-green-600 mx-auto mb-2" />
              <p className="text-green-600 font-medium">{t.uploadFromGallery}</p>
            </div>
          </button>
          
          <button
            onClick={captureFromCamera}
            className="flex items-center justify-center p-8 border-2 border-dashed border-blue-300 rounded-lg hover:border-blue-500 transition-colors"
          >
            <div className="text-center">
              <Camera className="h-8 w-8 text-blue-600 mx-auto mb-2" />
              <p className="text-blue-600 font-medium">{t.takePhoto}</p>
            </div>
          </button>
        </div>

        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleImageUpload}
          className="hidden"
        />

        {selectedImage && (
          <div className="text-center">
            <img
              src={selectedImage}
              alt="Uploaded crop"
              className="max-w-full h-64 object-contain mx-auto rounded-lg border mb-4"
            />
            <button
              onClick={analyzeImage}
              disabled={analyzing}
              className="bg-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 disabled:opacity-50 flex items-center mx-auto"
            >
              {analyzing ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  {t.analyzingImage}
                </>
              ) : (
                <>
                  <CheckCircle className="h-4 w-4 mr-2" />
                  {t.analyzeDisease}
                </>
              )}
            </button>
          </div>
        )}
      </div>

      {/* Results Section */}
      {result && (
        <div className="space-y-6">
          {/* Disease Identification */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold mb-4 text-red-800">ЁЯжа {t.diseaseIdentified}</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="text-center p-4 bg-red-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">{t.diseaseName}</p>
                <p className="text-lg font-bold text-red-800">{result.disease}</p>
              </div>
              <div className="text-center p-4 bg-orange-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">{t.confidence}</p>
                <p className="text-lg font-bold text-orange-600">{result.confidence}%</p>
              </div>
              <div className="text-center p-4 bg-yellow-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">{t.severity}</p>
                <p className="text-lg font-bold text-yellow-600">{result.severity}</p>
              </div>
            </div>
            <div className="mt-4 p-4 bg-gray-50 rounded-lg">
              <p className="text-sm text-gray-600 mb-1">{t.cause}</p>
              <p className="text-gray-800">{result.cause}</p>
            </div>
          </div>

          {/* Organic Solutions */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold mb-4 text-green-800">
              <Leaf className="inline h-5 w-5 mr-2" />
              {t.organicTreatment}
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {result.organicSolutions.map((solution: string, index: number) => (
                <div key={index} className="flex items-start p-3 bg-green-50 rounded-lg">
                  <CheckCircle className="h-5 w-5 text-green-600 mr-2 mt-0.5 flex-shrink-0" />
                  <span className="text-green-800">{solution}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Fertilizer Suggestions */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold mb-4 text-blue-800">
              <Pill className="inline h-5 w-5 mr-2" />
              {t.fertilizerRecommendations}
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {result.fertilizerSuggestions.map((fertilizer: string, index: number) => (
                <div key={index} className="p-4 bg-blue-50 rounded-lg text-center">
                  <p className="text-blue-800 font-medium">{fertilizer}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Preventive Measures */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold mb-4 text-purple-800">
              ЁЯЫб {t.preventiveMeasures}
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {result.preventiveMeasures.map((measure: string, index: number) => (
                <div key={index} className="flex items-start p-3 bg-purple-50 rounded-lg">
                  <span className="text-purple-600 mr-2">тАв</span>
                  <span className="text-purple-800">{measure}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DiseaseDetection;